unit MainUnit;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.CustomizeDlg,
  Vcl.ToolWin, Vcl.ActnMan, Vcl.ActnCtrls, Vcl.ActnMenus, Vcl.ActnColorMaps,
  Vcl.Mask, Vcl.ExtCtrls, Vcl.Buttons, Vcl.CheckLst, Vcl.CategoryButtons,
  Vcl.ButtonGroup, Vcl.ComCtrls, Vcl.JumpList, CommCtrl, Data.DB, Vcl.Grids,
  Vcl.DBGrids, Vcl.ControlList, System.ImageList, Vcl.ImgList, Vcl.Menus,
  Vcl.WinXCtrls;

type

  TTeam = record
    Code, Rank: Integer;
    Name: String[25];
    Country: string[25];
  end;

  TPlayer = record
    FullName: String[50];
    PenaltyPoints, GoalsScored: Integer;
    Code: String[6];
    Position: String[12];
  end;

  PPlayer = ^TPlayer;

  TArrPlayer = Array [0..10] of TPlayer;
  TAllInfo = Record
    Data: TTeam;
    TeamPlayers: TArrPlayer;
  End;

  PTeam = ^TTeamNode;
  TTeamNode = Record
    Info: TAllInfo;
    Next: PTeam;
  end;

  TTeamList = record
    Head: PTeam;
    Tail: PTeam;
  end;
  
  TListView = class(Vcl.ComCtrls.TListView)
  protected
      procedure WndProc(var Message: TMessage); override;
  end;

  TMainForm = class(TForm)
    LViewTeam: TListView;
    BitBtn2: TBitBtn;
    PanelAnalysis: TPanel;
    PanelAdd: TPanel;
    PlayerListView: TListView;
    PanelPlayers: TPanel;
    Label2: TLabel;
    ImageList1: TImageList;
    AddPlayerBtn: TBitBtn;
    MainMenu: TMainMenu;
    PopupMenu: TPopupMenu;
    N1: TMenuItem;
    OpenFile: TMenuItem;
    SaveFile: TMenuItem;
    PlayerRatings: TMenuItem;
    AnalysisButton: TMenuItem;
    OpenDialog: TOpenDialog;
    SaveDialog: TSaveDialog;
    SplitView1: TSplitView;
    Procedure InsertInList(InsNode: TTeamNode);
    Procedure RemoveTeam(Code: Integer);
    procedure LViewTeamSelectItem(Sender: TObject; Item: TListItem;
      Selected: Boolean);
    procedure LViewTeamDblClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure LViewTeamKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure BitBtn2Click(Sender: TObject);
    Procedure AddToListView;
    Function FindTeamByCode(Code: Integer): PTeam;
    Procedure ChangeRowInListView(Item: TListItem; CurrentNode: PTeam);
    procedure AddPlayerBtnClick(Sender: TObject);
    Procedure AddToPlayerListView(Index: Integer; CurrentNode: PTeam);
    Procedure ShowPlayers(Temp: PTeam);
    procedure PlayerListViewDblClick(Sender: TObject);
    Procedure SetNewPlayer(Item: TListItem; Temp: PTeam);
    procedure PlayerListViewKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure PlayerRatingsClick(Sender: TObject);
    procedure SaveFileClick(Sender: TObject);
    procedure OpenFileClick(Sender: TObject);
    Procedure ClearLinkedList;
    procedure AnalysisButtonClick(Sender: TObject);
    procedure Image1Click(Sender: TObject);
  private
      FTeamList: TTeamList;
      FListViewOldWndProc, FPlayerOldWndProc: TWndMethod;
      procedure ListViewNewWndProc1(var Msg: TMessage);
      procedure ListViewNewWndProc2(var Msg: TMessage);
  public
      Property TeamList: TTeamList Read FTeamList;

  end;

var
  MainForm: TMainForm;



implementation

{$R *.dfm}

uses TeamAddUnit, PlayerAddUnit, Ratings, PlayerOfTeam;

procedure TMainForm.ListViewNewWndProc1(var Msg: TMessage);
var
    hdn: ^THDNotify;
begin
    if Msg.Msg = WM_NOTIFY then
    begin
        hdn := Pointer(Msg.lParam);
        if (hdn.hdr.code = HDN_BeginTrackW) or (hdn.hdr.code = HDN_BeginTrackA) then
            Msg.Result := 1
        else
            FListViewOldWndProc(Msg);
    end 
    else
        FListViewOldWndProc(Msg);
end;

procedure TMainForm.ListViewNewWndProc2(var Msg: TMessage);
var
    hdn: ^THDNotify;
begin
    if Msg.Msg = WM_NOTIFY then
    begin
        hdn := Pointer(Msg.lParam);
        if (hdn.hdr.code = HDN_BeginTrackW) or (hdn.hdr.code = HDN_BeginTrackA) then
            Msg.Result := 1
        else
            FPlayerOldWndProc(Msg);
    end
    else
        FPlayerOldWndProc(Msg);
end;

procedure TListView.WndProc(var Message: TMessage);
begin
    If Message.Msg = WM_NCCALCSIZE then
        ShowScrollBar(Handle, SB_HORZ, False);
    Inherited WndProc(Message);
end;

Procedure TMainForm.AddToListView;
Var
    Item: TListItem;
Begin
    Item := LViewTeam.Items.Add;
    Item.Caption := IntToStr(FTeamList.Tail^.Info.Data.Code);
    Item.SubItems.Add(FTeamList.Tail^.Info.Data.Name);
    Item.SubItems.Add(FTeamList.Tail^.Info.Data.Country);
    Item.SubItems.Add(IntToStr(FTeamList.Tail^.Info.Data.Rank));
End;

Procedure TMainForm.ChangeRowInListView(Item: TListItem; CurrentNode: PTeam);
Begin
    Item.Caption := IntToStr(CurrentNode^.Info.Data.Code);
    Item.SubItems.Strings[0] := CurrentNode^.Info.Data.Name;
    Item.SubItems.Strings[1] := CurrentNode^.Info.Data.Country;
    Item.SubItems.Strings[2] := IntToStr(CurrentNode^.Info.Data.Rank);
End;

Procedure TMainForm.AddToPlayerListView(Index: Integer; CurrentNode: PTeam);
Var
    Item: TListItem;
Begin
    Item := PlayerListView.Items.Add;
    Item.Caption := CurrentNode^.Info.TeamPlayers[Index].Code;
    Item.SubItems.Add(CurrentNode^.Info.TeamPlayers[Index].FullName);
    Item.SubItems.Add(CurrentNode^.Info.TeamPlayers[Index].Position);
    Item.SubItems.Add(IntToStr(CurrentNode^.Info.TeamPlayers[Index].PenaltyPoints));
    Item.SubItems.Add(IntToStr(CurrentNode^.Info.TeamPlayers[Index].GoalsScored));
End;

procedure TMainForm.AnalysisButtonClick(Sender: TObject);
begin
    TeamForm.CalculatePlayers(FTeamList.Head);
    TeamForm.ShowModal;
end;

procedure TMainForm.AddPlayerBtnClick(Sender: TObject);
begin
    //CurrentNode := FindTeamByCode(FCurrentCode);
    //AddPlayerForm.FCurrentNode := CurrentNode;
    If PlayerListView.GetCount < 11 Then
    Begin
        AddPlayerForm.AddBtn.Visible := True;
        AddPlayerForm.ChangeBtn.Visible := False;
        AddPlayerForm.FCurrentIndex := PlayerListView.GetCount;
        AddPlayerForm.ShowModal;
        If AddPlayerForm.ModalResult = MrYes Then
            AddToPlayerListView(PlayerListView.GetCount, AddPlayerForm.FCurrentNode);
    End
    Else
        MessageBox(Handle, 'У вас достигнуто максимальное число игроков', 'Внимание', MB_ICONINFORMATION);
end;

procedure TMainForm.BitBtn2Click(Sender: TObject);
begin
    AddForm.ChangeBtn.Visible := False;
    AddForm.AddBtn.Visible := True;
    AddForm.ShowModal;
    If AddForm.ModalResult = MrYes Then
    Begin
        AddToListView;
        SaveFile.Enabled := True;
    End;
end;

procedure TMainForm.FormCreate(Sender: TObject);
begin
    FListViewOldWndProc := LViewTeam.WindowProc;
    LViewTeam.WindowProc := ListViewNewWndProc1;
    FPlayerOldWndProc := PlayerListView.WindowProc;
    PlayerListView.WindowProc := ListViewNewWndProc2;
    LViewTeam.Columns[2].Width := LVSCW_AUTOSIZE_USEHEADER;
end;
    

procedure TMainForm.FormShow(Sender: TObject);
begin
    LViewTeam.Width := LViewTeam.Width + 1;
    LViewTeam.Width := LViewTeam.Width - 1;
end;

Function TMainForm.FindTeamByCode(Code: Integer): PTeam;
Var
    CurrentNode: PTeam;
    IsFounded: Boolean;
Begin
    Result := Nil;
    IsFounded := False;
    CurrentNode := FTeamList.Head;
    While (CurrentNode <> nil) and Not(IsFounded) do
    Begin
        //мб просто IsFounded := ... Result := ...
        If CurrentNode^.Info.Data.Code = Code Then
        Begin
            IsFounded := True;
            Result := CurrentNode;
        End;
        CurrentNode := CurrentNode^.Next;
    End;
End;

Procedure TMainForm.RemoveTeam(Code: Integer);
Var
    CurrentNode, PreviousNode: PTeam;
begin
    CurrentNode := FTeamList.Head;
    PreviousNode := nil;
    While (CurrentNode <> nil) and (CurrentNode.Info.Data.Code <> Code) do
    begin
        PreviousNode := CurrentNode;
        CurrentNode := CurrentNode.Next;
    end;
    If CurrentNode <> nil then
    begin
        If CurrentNode = FTeamList.Head then
            FTeamList.Head := FTeamList.Head^.Next
        Else
            PreviousNode.Next := CurrentNode^.Next;
        If CurrentNode = FTeamList.Tail then
            FTeamList.Tail := PreviousNode;
        Dispose(CurrentNode);
    end;
end;

procedure TMainForm.InsertInList(InsNode: TTeamNode);
Var
    NewNode: PTeam;
begin
    New(NewNode);
    NewNode^.Info.Data := InsNode.Info.Data;
    NewNode^.Info.TeamPlayers := InsNode.Info.TeamPlayers;
    NewNode^.Next := nil;
    If FTeamList.Head = nil Then
    Begin
        FTeamList.Head := NewNode;
        FTeamList.Tail := NewNode;
    End
    Else
    Begin
        FTeamList.Tail^.Next := NewNode;
        FTeamList.Tail := FTeamList.Tail^.Next;
        //FTeamList.Tail^.Next := Nil;
    End;
end;

procedure TMainForm.LViewTeamDblClick(Sender: TObject);
var
    Item: TListItem;
    CurrentNode: PTeam;
begin
    Item := LViewTeam.Selected;
    If Assigned(Item) and Item.Selected then
    begin
        CurrentNode := FindTeamByCode(StrToInt(Item.Caption));
        AddForm.SetTeamEdits(CurrentNode);
        AddForm.AddBtn.Visible := False;
        AddForm.ChangeBtn.Visible := True;
        AddForm.ShowModal;
        If AddForm.ModalResult = MrYes Then
            ChangeRowInListView(Item, CurrentNode);
    end;
end;

procedure TMainForm.LViewTeamKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
    //Var X := LViewTeam.Selected.Caption; //код команды
    If (Key = VK_DELETE) and (LViewTeam.ItemIndex <> -1) and
    (MessageBox(MainForm.Handle, 'Вы хотите удалить данную команду?', 'Удаление', MB_YESNO + MB_ICONQUESTION) = ID_YES) Then
    Begin
        RemoveTeam(StrToInt(LViewTeam.Selected.Caption));
        LViewTeam.Delete(LViewTeam.Selected);
        SaveFile.Enabled := Not(LViewTeam.GetCount = 0);
    End;
end;

Procedure TMainForm.ShowPlayers(Temp: PTeam);
Var
    I: Integer;
Begin
    For I := Low(Temp^.Info.TeamPlayers) to High(Temp^.Info.TeamPlayers) do
        If Temp.Info.TeamPlayers[I].Code <> '' Then
            AddToPlayerListView(PlayerListView.GetCount, Temp);
End;

procedure TMainForm.LViewTeamSelectItem(Sender: TObject; Item: TListItem;
  Selected: Boolean);
begin
    If Selected Then
    Begin
        //FCurrentCode := StrToInt(Item.Caption);
        AddPlayerForm.FCurrentNode := FindTeamByCode(StrToInt(Item.Caption));
        PlayerListView.Clear;
        ShowPlayers(AddPlayerForm.FCurrentNode);
        AddPlayerBtn.Enabled := True;
    End
    Else
    Begin
        PlayerListView.Clear;
        AddPlayerBtn.Enabled := False;
    End;
end;

procedure TMainForm.ClearLinkedList;
Var
    Current, NextNode: PTeam;
begin
    Current := FTeamList.Head;
    while current <> nil do
    begin
        NextNode := Current^.Next;
        Dispose(Current);
        Current := nextNode;
    end;
    FTeamList.Head := nil;
    FTeamList.Tail := nil;
end;



procedure TMainForm.OpenFileClick(Sender: TObject);
Var
    FileInput: File of TAllInfo;
    Temp: PTeam;
    Item: TListItem;
begin
    If OpenDialog.Execute Then
    Begin
        Try
            Try
                AssignFile(FileInput, ChangeFileExt(OpenDialog.FileName, '.dat'));
                Reset(FileInput);
                ClearLinkedList;
                PlayerListView.Clear;
                LViewTeam.Clear;
                While Not Eof(FileInput) do
                Begin
                    New(Temp);
                    Temp^.Next := Nil;
                    Read(FileInput, Temp^.Info);
                    InsertInList(Temp^);
                End;
                Temp := FTeamList.Head;
                While Temp <> Nil do
                Begin
                    Item := LViewTeam.Items.Add;
                    Item.Caption := IntToStr(Temp^.Info.Data.Code);
                    Item.SubItems.Add(Temp^.Info.Data.Name);
                    Item.SubItems.Add(Temp^.Info.Data.Country);
                    Item.SubItems.Add(IntToStr(Temp^.Info.Data.Rank));
                    Temp := Temp^.Next;
                End;
                SaveFile.Enabled := True;
            Except
                MessageBox(Handle, 'Файл некорректен!', 'Внимание!', MB_OK + MB_ICONWARNING);
            End;
        Finally
            If FileExists(ChangeFileExt(SaveDialog.FileName, '.dat')) Then
                CloseFile(FileInput);
        End;    
    End;
    
end;

procedure TMainForm.SaveFileClick(Sender: TObject);
Var
    FileOutput: File of TAllInfo;
    Temp: PTeam;
begin
    If SaveDialog.Execute Then
    Begin
        Try
            Try
                AssignFile(FileOutput, ChangeFileExt(SaveDialog.FileName, '.dat'));
                Rewrite(FileOutput);
                Temp := FTeamList.Head;
                While Temp <> Nil do
                Begin
                    Write(FileOutput, Temp^.Info);
                    Temp := Temp^.Next;
                End;
            Except
                MessageBox(Handle, 'Файл некорректен!', 'Внимание!', MB_OK + MB_ICONWARNING);
            End;
        Finally
            CloseFile(FileOutput);
        End;
    End;
end;

Procedure TMainForm.SetNewPlayer(Item: TListItem; Temp: PTeam);
Begin
    Item.Caption := Temp^.Info.TeamPlayers[Item.Index].Code;
    Item.SubItems.Strings[0] := Temp^.Info.TeamPlayers[Item.Index].FullName;
    Item.SubItems.Strings[1] := Temp^.Info.TeamPlayers[Item.Index].Position;
    Item.SubItems.Strings[2] := IntToStr(Temp^.Info.TeamPlayers[Item.Index].PenaltyPoints);
    Item.SubItems.Strings[3] := IntToStr(Temp^.Info.TeamPlayers[Item.Index].GoalsScored);
End;

procedure TMainForm.PlayerListViewDblClick(Sender: TObject);
var
    Item: TListItem;
    CurrentNode: PTeam;
    Temp: Integer;
begin
    Item := PlayerListView.Selected;
    If Assigned(Item) and Item.Selected then
    begin
        AddPlayerForm.AddBtn.Visible := False;
        AddPlayerForm.ChangeBtn.Visible := True;
        AddPlayerForm.FCurrentIndex := Item.Index;
        AddPlayerForm.SetPlayerEdits;
        AddPlayerForm.ShowModal;
        If AddPlayerForm.ModalResult = MrYes Then
            SetNewPlayer(Item, AddPlayerForm.FCurrentNode);
    end;
end;

procedure TMainForm.PlayerListViewKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
Var
    Item: TListItem;
    Index, I: Integer;
    CurrentNode: PTeam;
begin
    If (Key = VK_DELETE) and (PlayerListView.ItemIndex <> -1) and
    (MessageBox(MainForm.Handle, 'Вы хотите удалить данного игрока?', 'Удаление', MB_YESNO + MB_ICONQUESTION) = ID_YES) Then
    Begin
        Item := PlayerListView.Selected;
        Index := Item.Index;
        CurrentNode := AddPlayerForm.FCurrentNode;
        For I := Index to High(CurrentNode^.Info.TeamPlayers) - 1 do
            CurrentNode^.Info.TeamPlayers[I] := CurrentNode^.Info.TeamPlayers[I + 1];
        CurrentNode^.Info.TeamPlayers[10] := AddForm.FStartArr[10];
        PlayerListView.Clear;
        ShowPlayers(CurrentNode);
    End;
end;

procedure TMainForm.PlayerRatingsClick(Sender: TObject);
begin
    RatingForm.FindBestAndWorst(FTeamList.Head);
    RatingForm.ShowModal;
end;

end.
